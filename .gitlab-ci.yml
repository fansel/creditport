---
variables:
  CI_REGISTRY_IMAGE: docker.io/swtp202313/creditport
  CI_COMMIT_TAG: latest
  DB_HOST: db
  DB_USERNAME: admin
  DB_PASSWORD: admin
  DB_PORT: 5432
  DB_NAME: development

# Wenn der Commit Tag nicht gesetzt ist wird er auf latest gesetzt
# workflow:
#   rules:
#     - if: $CI_COMMIT_TAG == ""
#       variables:
#         CI_COMMIT_TAG: "latest"
#     - when: always

stages:
  - test
  - build
  - deploy

test_frontend:
  stage: test
  image: node:21.1-alpine3.17
  when: manual
  script:
    - cd frontend
    - npm install
    - npm run test

test_backend:
  stage: test
  when: manual
  image: gradle:8.4.0-jdk17-alpine
  services:
    - name: postgres:16.0-alpine
      alias: db
      variables:
        POSTGRES_PASSWORD: '$DB_PASSWORD'
        POSTGRES_USER: '$DB_USERNAME'
        POSTGRES_DB: '$DB_NAME'
      entrypoint: ['docker-entrypoint.sh']
      command: ['postgres']
  script:
    - cd creditport-backend
    - export DB_NAME="$DB_NAME"
    - export DB_USERNAME="$DB_USERNAME"
    - export DB_PASSWORD="$DB_PASSWORD"
    - export DB_PORT="$DB_PORT"
    - export DB_HOST="$DB_HOST"
    - gradle test -i

generate_javadoc:
  stage: build
  when: manual
  image: gradle:8.4.0-jdk17-alpine
  script:
    - cd creditport-backend
    - gradle javadoc
    - mkdir -p doc
    - mv build/docs/javadoc/* doc/
    - echo $GITLAB_ACCESS_TOKEN
    - git add doc/
    - git commit -m "Update JavaDoc documentation by $GITLAB_USER_NAME"
  only:
    - developer







build_backend:
  stage: build
  needs: ['test_backend']
  when: manual
  image:
    name: gcr.io/kaniko-project/executor:v1.14.0-debug
    entrypoint: ['']
  services:
    - name: postgres:16.0-alpine
      alias: db
      variables:
        POSTGRES_PASSWORD: '$DB_PASSWORD'
        POSTGRES_USER: '$DB_USERNAME'
        POSTGRES_DB: '$DB_NAME'
      entrypoint: ['docker-entrypoint.sh']
      command: ['postgres']
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n $CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD | base64)\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context "${CI_PROJECT_DIR}/creditport-backend" --build-arg DB_HOST=$DB_HOST --build-arg DB_NAME=$DB_NAME --build-arg
      DB_PORT=$DB_PORT --build-arg DB_USERNAME=$DB_USERNAME --build-arg DB_PASSWORD=$DB_PASSWORD  --dockerfile
      "${CI_PROJECT_DIR}/creditport-backend/Dockerfile" --destination "${CI_REGISTRY_IMAGE}:backend-${CI_COMMIT_TAG}"
  rules:
    - if: '$CI_COMMIT_TAG'

build_frontend:
  stage: build
  needs: ['test_frontend']
  when: manual
  image:
    name: gcr.io/kaniko-project/executor:v1.14.0-debug
    entrypoint: ['']
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n $CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD | base64)\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context "${CI_PROJECT_DIR}/frontend" --dockerfile "${CI_PROJECT_DIR}/frontend/Dockerfile" --destination
      "${CI_REGISTRY_IMAGE}:frontend-${CI_COMMIT_TAG}"
  rules:
    - if: '$CI_COMMIT_TAG'

deploy:
  stage: deploy
  needs: ['build_frontend', 'build_backend']
  when: manual
  image: nginx:1.25.3-alpine
  variables:
    DOCKER_HOST: ssh://$DEPLOY_USER@$DEPLOY_SERVER
  before_script:
    - apk update
    - apk add openssh docker docker-compose
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo $CI_REGISTRY_TOKEN | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker compose -f docker-compose-prod.yml stop
    - docker compose rm -f frontend backend
    - docker compose -f docker-compose-prod.yml up -d
